buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  beliefs
  desire
  intention
 

]
 
globals [graph]


to init-buses
  ; Initialize your agents here.
  ; Beliefs, each bus has own belief which is updated at subsequent bus stops during its tour
  ; beliefs are stored in form of a list containing information on passenegerID and destination of the passengers waiting at this bus stop
  set beliefs (get-passengers-at-stop current_stop)
  show beliefs
    
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
end


to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  ; execute action to travel to the next bus stop
  ; pick-up people with destination lying on the bus tour based on the intention
  
  init-buses
  update-intentions
  ;update-beliefs
  ;update-desire

  
end

; Update-Desire bring passengers to desired destination as efficiently as possible (quick and at lowest possible cost)
; if destination of a waiting passenger actually matches the tour of the bus, then the passenger is picked-up
;to update-desire
;end

; Update-Beliefs, based on current bus stop of a given bus, we update its beliefs
;to update-beliefs
   ; set beliefs (get-passengers-at-stop current_stop)
    
;end

; Intention (next bus stop to be traveled to, which passengers will be picked up at the next bus stop)
; Here some sort of checking between bus line tour and beliefs 
; Create Fixed Schedule, bus with ID 24 has a specific tour, bus with ID 25 has a specific tour ... etc.

; create list of passenger IDs to be picked up at next bus stop

to update-intentions
  foreach (beliefs)
  [
    passenger -> show passeneger
  ]
]
end


    ;set intention fput item 0 passenger intention 






